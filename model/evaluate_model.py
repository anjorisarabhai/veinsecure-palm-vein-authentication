# -*- coding: utf-8 -*-
"""evaluate_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G9PLFekUfxtdEj4PrpJuFLqME7lOvYkc

# **Evaluation & Results**
"""

import numpy as np
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns
import os
import pandas as pd

from tensorflow.keras.models import load_model
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.utils import to_categorical

!rm -rf veinsecure-palm-vein-authentication
!git clone https://github.com/anjorisarabhai/veinsecure-palm-vein-authentication.git

import sys
sys.path.append('/content/veinsecure-palm-vein-authentication')

!touch /content/veinsecure-palm-vein-authentication/utils/__init__.py

!wget -O /content/veinsecure-palm-vein-authentication/utils/helpers.py https://raw.githubusercontent.com/anjorisarabhai/veinsecure-palm-vein-authentication/main/utils/helpers.py

!ls -R /content/veinsecure-palm-vein-authentication

import os
print(os.listdir('/content/veinsecure-palm-vein-authentication/utils'))

!ls /content/veinsecure-palm-vein-authentication/utils
!sed -n '1,20p' /content/veinsecure-palm-vein-authentication/utils/helpers.py

!head -n 127 /content/veinsecure-palm-vein-authentication/utils/helpers.py

import importlib
import utils.helpers
importlib.reload(utils.helpers)

from utils.helpers import create_data_generators, load_processed_images

from google.colab import files
uploaded = files.upload()

import zipfile
import os

zip_path = "processed_dataset.zip"
extract_path = "processed_dataset"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_path)

print("Extracted to:", extract_path)

!wget https://github.com/anjorisarabhai/veinsecure-palm-vein-authentication/raw/main/processed_dataset.zip
!unzip processed_dataset.zip

"""### **Load data & labels and Create generators**"""

X, y, class_names = load_processed_images("processed_dataset")
le = LabelEncoder()
y_encoded = le.fit_transform(y)
y_cat = to_categorical(y_encoded)

_, _, test_gen = create_data_generators(X, y_encoded, batch_size=32, augment=False)

!git lfs install

"""### **Load the trained model**"""

model = load_model("veinsecure-palm-vein-authentication/results/models/final_model.h5")

"""### **Predict on test set**"""

y_true = []
y_pred = []

for i in range(len(test_gen)):
    x_batch, y_batch = test_gen[i]
    y_true.extend(np.argmax(y_batch, axis=1))
    preds = model.predict(x_batch)
    y_pred.extend(np.argmax(preds, axis=1))
y_pred_probs = model.predict(test_gen)
y_pred = np.argmax(y_pred_probs, axis=1)

"""### **Evaluation metrics**"""

acc = accuracy_score(y_true, y_pred)
prec = precision_score(y_true, y_pred, average='macro', zero_division=0)
rec = recall_score(y_true, y_pred, average='macro', zero_division=0)
f1 = f1_score(y_true, y_pred, average='macro', zero_division=0)

print("Accuracy:", acc)
print("Precision:", prec)
print("Recall:", rec)
print("F1 Score:", f1)

"""### **Save summary to CSV**"""

summary_df = pd.DataFrame({
    "Metric": ["Accuracy", "Precision", "Recall", "F1 Score"],
    "Score": [acc, prec, rec, f1]
})

os.makedirs("results", exist_ok=True)
summary_df.to_csv("results/evaluation_summary.csv", index=False)

"""### **Confusion matrix**"""

cm = confusion_matrix(y_true, y_pred)
plt.figure(figsize=(12, 10))
sns.heatmap(cm, annot=True, fmt='d', xticklabels=class_names, yticklabels=class_names, cmap='Blues')
plt.title("Confusion Matrix")
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.tight_layout()
plt.show()

os.makedirs("results/plots", exist_ok=True)
plt.savefig("results/plots/confusion_matrix.png")
plt.close()

import shutil
shutil.make_archive("results", 'zip', "results")

from google.colab import files
files.download("results.zip")

