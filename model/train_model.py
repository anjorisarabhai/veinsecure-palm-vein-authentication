# -*- coding: utf-8 -*-
"""train_model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Mvk1aCmGkPKBYdslOmHcoeB3ABP-fJ7Y

# **Model Taining**

## **Final Model Prep & Data Pipeline**
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

!git clone https://github.com/anjorisarabhai/veinsecure-palm-vein-authentication.git

"""Note: if not able to import from utils.helper try removing the clone directory using:

`!rm -rf veinsecure-palm-vein-authentication`

and then clone again
"""

import sys
sys.path.append('/content/veinsecure-palm-vein-authentication')

!touch /content/veinsecure-palm-vein-authentication/utils/__init__.py

!ls -R /content/veinsecure-palm-vein-authentication

import os
print(os.listdir('/content/veinsecure-palm-vein-authentication/utils'))

from utils.helpers import load_processed_images

"""### **Modular Model Builder + Final CNN Architecture**"""

def build_simple_cnn(input_shape, num_classes, dropout_rate=0.3):
    model = tf.keras.Sequential([
        tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=input_shape),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Dropout(dropout_rate),

        tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
        tf.keras.layers.MaxPooling2D(2, 2),
        tf.keras.layers.Dropout(dropout_rate),

        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(128, activation='relu'),
        tf.keras.layers.Dropout(dropout_rate),
        tf.keras.layers.Dense(num_classes, activation='softmax')
    ])
    return model

"""### **Model Config Options**"""

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras import layers, models

def get_model(config, input_shape, num_classes):
    arch = config.get("architecture", "simple_cnn")
    dropout = config.get("dropout", 0.3)

    if arch == "simple_cnn":
        return build_simple_cnn(input_shape, num_classes, dropout)

    elif arch == "mobilenet":
        base_model = MobileNetV2(include_top=False, input_shape=input_shape, weights=None)
        model = models.Sequential([
            base_model,
            layers.GlobalAveragePooling2D(),
            layers.Dropout(dropout),
            layers.Dense(num_classes, activation='softmax')
        ])
        return model

    else:
        raise ValueError(f"Unsupported architecture: {arch}")

"""### **Config Dictionary**"""

config = {
    "architecture": "simple_cnn",
    "dropout": 0.3,
    "optimizer": "adam",
    "batch_size": 32,
    "learning_rate": 0.001
}

